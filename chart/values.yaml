global:
  image:
    # registry: registry1.dso.mil
    # repository: ironbank/opensource/grafana/grafana-loki
    # tag: 2.3.0
    priorityClassName: null
    pullPolicy: IfNotPresent
    pullSecrets:
    - private-registry

  # -- Create Loki config for all sub-charts.
  # Uses data within 'global.config' value
  createGlobalConfig: false
  # -- Secret which Pods will consume for config.
  # Only use if 'global.createGlobalConfig' is true or you have a pre-existing Secret.
  # BigBang createGlobalConfig creates Secret: "loki-config"
  existingSecretForConfig: ""

  # -- Should authentication be enabled
  auth_enabled: false
  
  storage:
    # -- Values for external storage like S3 & GCS Buckets, also can set `local` storage configuration
    bucketNames:
      chunks: loki
      ruler: loki
      admin: admin
    type: s3
    s3:
      s3: null
      # -- Endpoint for External ObjectStorage configuration
      endpoint: null
      # -- Region for External ObjectStorage configuration
      region: null
      # -- AWS secret_access_key for External ObjectStorage configuration
      secretAccessKey: null
      # -- AWS access_key_id for External ObjectStorage configuration
      accessKeyId: null
      # -- Force S3 path style for ObjectStorage configuration
      s3ForcePathStyle: true
      # -- Toggle insecure for ObjectStorage configuration
      insecure: false
    gcs:
      chunkBufferSize: 0
      requestTimeout: "0s"
      enableHttp2: true
    local:
      chunks_directory: /var/loki/chunks
      rules_directory: /var/loki/rules

  # -- Check https://grafana.com/docs/loki/latest/configuration/#schema_config for more info on how to configure schemas
  schemaConfig: {}

  # -- Structured loki configuration, takes precedence over `loki.config`, `loki.schemaConfig`, `loki.storageConfig`
  structuredConfig: {}

  # -- Additional query scheduler config
  query_scheduler: {}

  # -- Additional storage config
  storage_config:
    boltdb_shipper:
      active_index_directory: /var/loki/boltdb-shipper-active
      cache_location: /var/loki/boltdb-shipper-cache
      cache_ttl: 24h
      shared_store: s3
    hedging:
      at: "250ms"
      max_per_second: 20
      up_to: 3

  commonConfig:
    path_prefix: /var/loki
    ring:
      kvstore:
        store: memberlist
  
  # -- Configure memcached as an external cache for chunk and results cache. Disabled by default
  # must enable and specify a host for each cache you would like to use.
  memcached:
    chunk_cache:
      enabled: false
      host: ""
      service: "memcached-client"
      batch_size: 256
      parallelism: 10
    results_cache:
      enabled: false
      host: ""
      service: "memcached-client"
      timeout: "500ms"
      default_validity: "12h"
 
  enterprise:
    # -- Enable enterprise features, license must be provided
    enabled: false

  # -- Configuration value for all sub-charts.
  # For use when `global.createGlobalConfig=true` & `config.existingSecretForConfig="logging-loki"`
  config: |
    {{- if .Values.global.enterprise.enabled}}
    {{- tpl (index .Values "loki-simple-scalable" "enterprise" "config") . }}
    {{- else }}
    auth_enabled: {{ .Values.global.auth_enabled }}
    {{- end }}

    server:
      http_listen_port: 3100
      grpc_listen_port: 9095

    memberlist:
      join_members:
        - {{ include "loki.name" . }}-memberlist

    {{- if .Values.global.commonConfig}}
    common:
    {{- toYaml .Values.global.commonConfig | nindent 2}}
      storage:
      {{- include "loki.commonStorageConfig" . | nindent 4}}
    {{- end}}

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_cache_freshness_per_query: 10m
      split_queries_by_interval: 15m

    {{- with .Values.global.memcached.chunk_cache }}
    {{- if and .enabled .host }}
    chunk_store_config:
      chunk_cache_config:
        memcached:
          batch_size: {{ .batch_size }}
          parallelism: {{ .parallelism }}
        memcached_client:
          host: {{ .host }}
          service: {{ .service }}
    {{- end }}
    {{- end }}

    {{- if .Values.global.schemaConfig}}
    schema_config:
    {{- toYaml .Values.global.schemaConfig | nindent 2}}
    {{- else }}
    schema_config:
      configs:
        - from: 2022-01-11
          store: boltdb-shipper
          {{- if eq .Values.global.storage.type "s3" }}
          object_store: s3
          {{- else if eq .Values.global.storage.type "gcs" }}
          object_store: gcs
          {{- else }}
          object_store: filesystem
          {{- end }}
          schema: v12
          index:
            prefix: loki_index_
            period: 24h
    {{- end }}

    {{- if or .Values.minio.enabled (eq .Values.global.storage.type "s3") (eq .Values.global.storage.type "gcs") }}
    ruler:
      storage:
      {{- include "loki.rulerStorageConfig" . | nindent 4}}
    {{- end }}

    ingester:
      chunk_target_size: 196608
      flush_check_period: 5s
      flush_op_timeout: 100m
      lifecycler:
        ring:
          kvstore:
            store: memberlist

    {{- with .Values.global.memcached.results_cache }}
    query_range:
      align_queries_with_step: true
      {{- if and .enabled .host }}
      cache_results: {{ .enabled }}
      results_cache:
        cache:
          default_validity: {{ .default_validity }}
          memcached_client:
            host: {{ .host }}
            service: {{ .service }}
            timeout: {{ .timeout }}
      {{- end }}
    {{- end }}

    {{- with .Values.global.storage_config }}
    storage_config:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.global.query_scheduler }}
    query_scheduler:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

domain: bigbang.dev

istio:
  enabled: false
  mtls:
    # STRICT = Allow only mutual TLS traffic
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    mode: STRICT

monitoring:
  enabled: false

networkPolicies:
  enabled: false
  controlPlaneCidr: 0.0.0.0/0

nameOverride: logging-loki

loki:
  # -- Enable Loki chart in single binary mode.
  # Recommended for smaller or non-production environments
  enabled: true
  image:
    repository: registry1.dso.mil/ironbank/opensource/grafana/loki
    tag: 2.6.0
    pullPolicy: IfNotPresent
    pullSecrets:
      - private-registry
  extraPorts:
  # -- Extra ports for loki pods.
  # Additional ports exposed to support HA communication
  - name: grpc
    port: 9095
    targetPort: grpc
    protocol: TCP
  # -- Extra ports for loki pods.
  # Additional ports exposed to support memberlist
  - name: tcp-memberlist
    port: 7946
    protocol: TCP
  
  nameOverride: logging-loki

  readinessProbe:
    initialDelaySeconds: 80
  livenessProbe:
    initialDelaySeconds: 80

  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 256Mi
  persistence:
    enabled: false
    accessModes:
    - ReadWriteOnce
    size: 10Gi

loki-simple-scalable:
  # -- Enable upstream loki-simple-scalable based chart
  # Recommended for large production environments
  enabled: false

  nameOverride: logging-loki

  loki:
    image:
      # -- The Docker registry
      registry: registry1.dso.mil
      # -- Docker image repository
      repository: ironbank/opensource/grafana/loki
      # -- Overrides the image tag whose default is the chart's appVersion
      tag: 2.6.0
      # -- Docker image pull policy
      pullPolicy: IfNotPresent

  # Configuration for the write node(s)
  write:
    # -- Number of replicas for the write
    replicas: 2
    resources:
      limits:
        cpu: 300m
        memory: 2Gi
      requests:
        cpu: 300m
        memory: 2Gi
  # Configuration for the read node(s)
  read:
    # -- Number of replicas for the read
    replicas: 2
    resources:
      limits:
        cpu: 300m
        memory: 2Gi
      requests:
        cpu: 300m
        memory: 2Gi
  # Configuration for the gateway (fronts read/write nodes)
  gateway:
    # -- Specifies whether the gateway should be enabled
    enabled: false
    image:
      registry: registry1.dso.mil
      repository: ironbank/opensource/nginx/nginx
      tag: 1.21.6
    # Gateway service configuration
    service:
      # -- Port of the gateway service
      port: 3100

  imagePullSecrets:
    - name: private-registry

  enterprise:
    # -- Enable enterprise features, license must be provided
    enabled: false
    
      # Default verion of GEL to deploy
    version: v1.4.1
  
    # -- Grafana Enterprise Logs license
    # In order to use Grafana Enterprise Logs features, you will need to provide
    # the contents of your Grafana Enterprise Logs license, either by providing the
    # contents of the license.jwt, or the name Kubernetes Secret that contains your
    # license.jwt.
    # To set the license contents, use the flag `--set-file 'license.contents=./license.jwt'`
    license:
      contents: "NOTAVALIDLICENSE"
  
    # -- Set to true when providing an external license
    useExternalLicense: false
  
    # -- Name of external licesne secret to use
    externalLicenseName: null
  
    # -- If enabled, the correct admin_client storage will be configured. If disabled while running enterprise,
    # make sure auth is set to `type: trust`, or that `auth_enabled` is set to `false`.
    adminApi:
      enabled: true
  
    # enterprise specific sections of the config.yaml file
    config: |
      {{- if .Values.enterprise.adminApi.enabled }}
      {{- if or .Values.minio.enabled (eq .Values.global.storage.type "s3") (eq .Values.global.storage.type "gcs") }}
      admin_client:
        storage:
          s3:
            bucket_name: {{ .Values.global.storage.bucketNames.admin }}
      {{- end }}
      {{- end }}
      auth:
        type: {{ .Values.enterprise.adminApi.enabled | ternary "enterprise" "trust" }}
      auth_enabled: {{ .Values.global.auth_enabled }}
      cluster_name: {{ .Release.Name }}
      license:
        path: /etc/loki/license/license.jwt
  
    image:
      # -- The Docker registry
      registry: registry1.dso.mil
      # -- Docker image repository
      repository: ironbank/grafana/grafana-enterprise-logs
      # -- Overrides the image tag whose default is the chart's appVersion
      tag: v1.4.1
      # -- Docker image pull policy
      pullPolicy: IfNotPresent
  
    # -- Configuration for `tokengen` target
    tokengen:
      # -- Whether the job should be part of the deployment
      enabled: true
      # -- Name of the secret to store the admin token in
      adminTokenSecret: "gel-admin-token"
      # -- Additional CLI arguments for the `tokengen` target
      extraArgs: []
      # -- Additional Kubernetes environment
      env: []
      # -- Additional labels for the `tokengen` Job
      labels: {}
      # -- Additional annotations for the `tokengen` Job
      annotations: {}
      # -- Additional volumes for Pods
      extraVolumes: []
      # -- Additional volume mounts for Pods
      extraVolumeMounts: []
      # -- Run containers as user `enterprise-logs(uid=10001)`
      securityContext:
        runAsNonRoot: true
        runAsGroup: 10001
        runAsUser: 10001
        fsGroup: 10001

minio:
  # -- Enable minio instance support, must have minio-operator installed
  enabled: false
  # Override the minio service name for easier connection setup
  service:
    nameOverride: "minio.logging.svc.cluster.local"
  tenants:
    # -- Minio root credentials
    secrets:
      name: "loki-objstore-creds"
      accessKey: "minio"
      secretKey: "minio123" # default key, change this!
    # -- Buckets to be provisioned to for tenant
    buckets:
      - name: chunks
      - name: ruler
    # -- Users to to be provisioned to for tenant
    users:
      - name: minio-user
    # -- User credentials to create for above user. Otherwise password is randomly generated.
    # This auth is not required to be set or reclaimed for minio use with Loki
    defaultUserCredentials:
      username: "minio-user"
      password: ""
    ## Specification for MinIO Pool(s) in this Tenant.
    pools:
      - servers: 1
        volumesPerServer: 4
        size: 750Mi
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
          fsGroup: 1001
    metrics:
      enabled: false
      port: 9000
      memory: 128Mi

serviceAccount:
  create: true
  name: null
  annotations: {}
  automountServiceAccountToken: true


bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      cypress_check_datasource: 'false'
      cypress_grafana_url: 'http://monitoring-grafana.monitoring.svc.cluster.local'
  scripts:
    image: registry1.dso.mil/ironbank/big-bang/base:2.0.0
    envs:
      LOKI_URL: 'http://{{ template "loki.fullname" . }}.{{ .Release.Namespace }}.svc:3100'
      LOKI_VERSION: '{{ .Values.loki.image.tag }}'
